(base) ian@ian-Latitude-E7440:~/Downloads$ ls *.py
rainrex.py  splinean.py
(base) ian@ian-Latitude-E7440:~/Downloads$ python3 rainrex.py
Monthly Rainfall Statistics
            sum  mean  std
Year Month                
1855 1      5.0   1.0  0.0
     2      3.0   1.0  0.0
     3      5.0   1.0  0.0
     4      3.0   1.0  0.0
     5      2.0   1.0  0.0
...         ...   ...  ...
2015 2      1.0   1.0  NaN
     3      1.0   1.0  NaN
     4      1.0   1.0  NaN
     5      1.0   1.0  NaN
     6      1.0   1.0  NaN

[4966 rows x 3 columns]

Annual Rainfall Statistics
        sum      mean       std
Year                           
1855  111.0  1.000000  0.000000
1856  135.0  1.000000  0.000000
1857  142.0  1.000000  0.000000
1858  158.0  1.000000  0.000000
1859  153.0  1.000000  0.000000
...     ...       ...       ...
2011  196.0  1.180723  0.605922
2012  212.0  1.618321  0.940197
2013  214.0  1.597015  0.966502
2014  211.0  1.574627  1.106215
2015    6.0  1.000000  0.000000

[161 rows x 3 columns]
(base) ian@ian-Latitude-E7440:~/Downloads$ cat rainrex.py
import pandas as pd
import numpy as np

# Read the CSV file
df = pd.read_csv('IDCJAC0009_086071_1800_Data.csv',
                 names=["Product_ID", "Station_No", "Year", "Day", "Month", "Year2", "Rainfall", "Continuous_Days", "Quality_Indicator"],
                 skiprows=1)  # Assumes the first row is a header

# Drop the duplicated 'Year2' column
df = df.drop(columns=['Year2'])

# Convert 'Rainfall' to numeric, setting errors='coerce' to handle invalid data by setting them as NaN
df['Rainfall'] = pd.to_numeric(df['Rainfall'], errors='coerce')

# Calculate monthly statistics
monthly_stats = df.groupby(['Year', 'Month']).Rainfall.agg(['sum', 'mean', 'std'])

# Calculate annual statistics
annual_stats = df.groupby(['Year']).Rainfall.agg(['sum', 'mean', 'std'])

# Print monthly and annual statistics
print("Monthly Rainfall Statistics")
print(monthly_stats)

print("\nAnnual Rainfall Statistics")
print(annual_stats)

# Optional: Save the statistics to CSV
monthly_stats.to_csv('monthly_rainfall_statistics.csv')
annual_stats.to_csv('annual_rainfall_statistics.csv')

(base) ian@ian-Latitude-E7440:~/Downloads$ sloccount rainrex.py
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/Downloads/rainrex.py to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
15      top_dir         python=15


Totals grouped by language (dominant language first):
python:          15 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 15
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.03)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.05 (0.65)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.04
Total Estimated Cost to Develop                           = $ 329
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
(base) ian@ian-Latitude-E7440:~/Downloads$ 
